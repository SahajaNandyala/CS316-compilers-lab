%{
	#include <stdio.h>
	#include <stdlib.h>
	#include <string.h> 
	#include <bits/stdc++.h>
	#include <vector>
	#include <iostream>
	using namespace std;
	#include "headers/symbolTable.hpp"
	#include "headers/ast.hpp"
	#include "headers/codeGeneration.hpp"
	
	int yylex();
	
	vector<code_object> code_objects;
	
	void yyerror(const char *err);

%}

%token PROGRAM
%token _BEGIN
%token END
%token FUNCTION
%token READ
%token WRITE
%token IF
%token ELSE
%token ENDIF
%token WHILE
%token ENDWHILE 
%token BREAK
%token RETURN
%token CONTINUE
%token INT
%token VOID
%token STRING
%token FLOAT
%token <s> IDENTIFIER
%token <float_value> FLOATLITERAL
%token <int_value> INTLITERAL
%token <string_value> STRINGLITERAL

%type <s> id var_type
%type <string_value> str 
%type <ast_node> mulop addop primary postfix_expr factor_prefix factor expr_prefix expr compop

%union{
int int_value;
float float_value;
std::string* string_value;
std::pair<std::string, int>* s;
struct ASTnode* ast_node;
}

%%

program:	PROGRAM id _BEGIN
		{
			addScope("GLOBAL",false);
		} 
		pgm_body END
		{	
			cout << "sys halt";			
			// printSymbolTable();	
		};


id:			IDENTIFIER {};
pgm_body:	decl func_declarations;
decl:		string_decl decl | var_decl decl |;

string_decl:	STRING id ':''=' str ';'
		{	
			if (isDeclared(($2)->first)) { return 0; }
			addEntry(($2)->first,"STRING", *($5) ,($2)->second);
					
			cout<< "str" << ' ' << ($2)->first << " " << *($5) << '\n';
		};
		
str:		STRINGLITERAL {} ;
var_decl:	var_type 
		{
			is_variable_declaration = true;
			variable_type = ($1)->first;
		} id_list ';';
		
var_type:	FLOAT {  } | INT {};

any_type:	var_type | VOID;

id_list:	id 
		{
			if (is_variable_declaration)
			{
				if (isDeclared(($1)->first)) { return 0;}
				addEntry(($1)->first,variable_type,"nan",($1)->second);
				
				cout << "var " << ($1)->first <<'\n';
			}
			else if (is_write)
			{	
				write_code(($1)->first);	
			}
			else if (is_read)
			{
				read_code(($1)->first);
			}
		}id_tail;
		
id_tail:	',' id
	{
		if (is_variable_declaration)
		{
			if (isDeclared(($2)->first)) { return 0;}
			addEntry(($2)->first,variable_type,"nan",($2)->second);
			
			cout << "var " << ($2)->first <<'\n';
			
		}
		else if (is_write)
		{
			write_code(($2)->first);
	
		}
		else if (is_read)
		{
			read_code(($2)->first);
		}
	}
	id_tail |
	{
		is_variable_declaration = false;
	};


param_decl_list:	param_decl param_decl_tail |;

param_decl:	var_type id
			{
				if (isDeclared(($2)->first)) { return 0;}
				addEntry(($2)->first,($1)->first,"nan",($2)->second);
			};


param_decl_tail:	',' param_decl param_decl_tail |;
func_declarations:	func_decl func_declarations |;

func_decl:	FUNCTION any_type id 
		{
			addScope(($3)->first,false);
		} '(' param_decl_list ')' _BEGIN func_body END;


func_body:	decl stmt_list;

stmt_list:	stmt stmt_list |;

stmt:		base_stmt | if_stmt | while_stmt;

base_stmt:	assign_stmt | read_stmt | write_stmt | return_stmt;

assign_stmt:	assign_expr ';';

assign_expr:	id ':''=' expr
{
	struct ASTnode * id_node = create_node("IDENTIFIER",($1)->first, nullptr, nullptr);
	struct ASTnode * node = create_node("OPERATOR", ":=", id_node , $4);
	struct code_object* exp_code_object = generate_code(node);
	for (auto& it : exp_code_object->instructions) 
	{
		cout << it << '\n';
	}
};

read_stmt:	READ 
{
	is_read = true;

} '(' id_list ')'
{
	is_read = false;
} ';' ;

write_stmt:	WRITE 
{ 
	is_write = true;
} '(' id_list ')'
{
	is_write = false;
} ';';

return_stmt:	RETURN expr ';' ;

expr:		expr_prefix factor 
{
	if ($1 == nullptr)
	{
		$$ = $2;
	}
	else 
	{
		$1->right = $2;
		$$ = $1;
	}
};

expr_prefix:	expr_prefix factor addop 
{
    if ($1 == nullptr)
    {
    	$3->left = $2;
    }    
    else 
    {
        $1->right = $2;
        $3->left = $1;
    }
    $$ = $3;
} | { $$ = nullptr; };
                    
                    
factor:		factor_prefix postfix_expr
{
    if ($1 == nullptr)
    {
    	$$ = $2;
    } 
    else
    {
        $1->right = $2;
        $$ = $1;
    }
};

factor_prefix:	factor_prefix postfix_expr mulop
{
	if ($1 == nullptr)
	{
		$3->left = $2;
	}
	else
	{
		$1->right = $2;
		$3->left = $1;
	}
	$$ = $3; 
} | { $$ = nullptr; } ;

postfix_expr:	primary { $$ = $1; } | call_expr {$$ = nullptr;};

call_expr:	id '(' expr_list ')';
expr_list:	expr expr_list_tail |;
expr_list_tail:	',' expr expr_list_tail |;

primary:	'(' expr ')' 
			{
				$$ = $2;
			} 
			| id 
			{
				$$ = create_node("IDENTIFIER",($1)->first,nullptr,nullptr);
			
			} 
			| INTLITERAL
			{
				$$ = create_node("INTLITERAL",to_string($1),nullptr,nullptr);
			
			} 
			| FLOATLITERAL
			{
				$$ = create_node("FLOATLITERAL",to_string($1),nullptr,nullptr);
			
			};
			
addop:		'+'{ $$ = create_node("OPERATOR","+",nullptr,nullptr);}
			|'-'{ $$ = create_node("OPERATOR","-",nullptr,nullptr); };

mulop:		'*'{ $$ = create_node("OPERATOR","*",nullptr,nullptr);}
			|'/'{ $$ = create_node("OPERATOR","/",nullptr,nullptr);};

if_stmt:	IF 
			{
				addScope("BLOCK",true);	
				if_block++;			
			} 
			'(' cond ')' decl stmt_list
			{			
				cout << "jmp label" << to_string(labels[if_block]) << '\n';
				cout << "label label" << to_string(labels[if_block]-1) << '\n';
			}else_part ENDIF
			{
				cout << "label label" << to_string(labels[if_block]) <<'\n';
				labels.pop_back();
				if_block--;
			};


else_part:	ELSE 
			{	
				addScope("BLOCK",true);
				
			}decl stmt_list |;


cond:		expr compop expr
			{
				$2->left = $1;
				$2->right = $3;
				
				struct code_object* cond_code_object = generate_code($2);
				for (auto& it : cond_code_object->instructions) 
				{
					cout << it << '\n';
				}
			
			};

compop:		'<'{$$ = create_node("COMPARE","<",nullptr,nullptr);} |'>'{$$ = create_node("COMPARE",">",nullptr,nullptr);} 
			|'='{$$ = create_node("COMPARE","=",nullptr,nullptr);}|'!''='{$$ = create_node("COMPARE","!=",nullptr,nullptr);}
			|'<''='{$$ = create_node("COMPARE","<=",nullptr,nullptr);}|'>''='{$$ = create_node("COMPARE",">=",nullptr,nullptr);};


while_stmt: WHILE 
			{
				addScope("BLOCK",true);
			} '(' cond ')' decl aug_stmt_list ENDWHILE;


aug_stmt_list: aug_stmt aug_stmt_list |;
aug_stmt: base_stmt| aug_if_stmt | while_stmt | CONTINUE ';' | BREAK ';';
aug_if_stmt: IF '(' cond ')' decl aug_stmt_list aug_else_part ENDIF;
aug_else_part: ELSE decl aug_stmt_list|;

%%
