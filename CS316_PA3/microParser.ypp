%{
	#include <stdio.h>
	#include <stdlib.h>
	#include <string.h> 
	#include <bits/stdc++.h>
	#include <vector>
	#include <iostream>
	using namespace std;

	int yylex();
	
	int blocks_count = 0;
	int scope_count = -1;
	bool is_variable_declaration = false;
	string variable_type;
	
	struct entry
	{
		string ID;
		string Value;
		string Type;
		int line;
	};
	
	struct symbol_tab
	{
		string scope_name;
		vector<entry> entries;	
	};
	
	vector<symbol_tab> symbol_table;
	
	void yyerror(const char *err);

%}

%token PROGRAM
%token _BEGIN
%token END
%token FUNCTION
%token READ
%token WRITE
%token IF
%token ELSE
%token ENDIF
%token WHILE
%token ENDWHILE 
%token BREAK
%token RETURN
%token CONTINUE
%token INT
%token VOID
%token STRING
%token FLOAT
%token IDENTIFIER
%token FLOATLITERAL
%token INTLITERAL
%token STRINGLITERAL

%type <s> var_type id str


%union{
std::pair<std::string, int>* s;
}

%%

program:	PROGRAM id _BEGIN
		{
			struct symbol_tab new_table;
			new_table.scope_name = "GLOBAL";			 
			symbol_table.push_back(new_table);
			scope_count++;
			
		} 
		pgm_body END
		{
			for (int i = 0; i < symbol_table.size(); i++)
			{
				if (i != 0)
				{
					cout << "\n";
				}
				cout << "Symbol table " << symbol_table[i].scope_name << endl;
				
				for (int j = 0; j < symbol_table[i].entries.size(); j++)
				{
					if (symbol_table[i].entries[j].Type == "STRING" )
					{
						cout << "name " << symbol_table[i].entries[j].ID << " type " << symbol_table[i].entries[j].Type << " value " << symbol_table[i].entries[j].Value<<endl;
					}
					else 
					{
						cout << "name " << symbol_table[i].entries[j].ID << " type " << symbol_table[i].entries[j].Type<<endl;
					}
					
					
				}
				
			}
		};


id:			IDENTIFIER {};
pgm_body:	decl func_declarations;
decl:		string_decl decl | var_decl decl |;

string_decl:	STRING id ':''=' str ';'
		{	
			for(int i = 0; i < symbol_table[scope_count].entries.size(); i++)
			{
				if (symbol_table[scope_count].entries[i].ID.compare(($2)->first) == 0)
				{
					cout << "DECLARATION ERROR " << ($2)->second << " (previous declaration was at line " << symbol_table[scope_count].entries[i].line << ')' << endl;
					return 0;
				}			
				
			}
						
			struct entry new_entry;
			new_entry.ID = ($2)->first;
			new_entry.Type = "STRING";
			new_entry.Value = ($5)->first; 
			new_entry.line = ($5)->second;
			symbol_table[scope_count].entries.push_back(new_entry);
			
		};
		
str:		STRINGLITERAL {} ;
var_decl:	var_type 
		{
			is_variable_declaration = true;
			variable_type = ($1)->first;
			// cout << "var decl :" << variable_type << endl;
		} id_list ';';
		
var_type:	FLOAT {} | INT {};
any_type:	var_type | VOID;

id_list:	id 
		{
			if (is_variable_declaration)
			{
				for(int i = 0; i < symbol_table[scope_count].entries.size(); i++)
				{
					if (symbol_table[scope_count].entries[i].ID.compare(($1)->first) == 0)
					{
						cout << "DECLARATION ERROR " << ($1)->first << " (previous declaration was at line " << symbol_table[scope_count].entries[i].line <<  ')';
						return 0;
					}			
				}
				
				struct entry new_entry;
				new_entry.ID = ($1)->first;
				new_entry.Type = variable_type;
				new_entry.Value = "nan";
				new_entry.line = ($1)->second;
				symbol_table[scope_count].entries.push_back(new_entry);	
			}
		
		}id_tail;
		
id_tail:	',' id
				{
					if (is_variable_declaration)
					{
						for(int i = 0; i < symbol_table[scope_count].entries.size(); i++)
						{
							if (symbol_table[scope_count].entries[i].ID.compare(($2)->first) == 0)
							{
								cout << "DECLARATION ERROR " << ($2)->first << " (previous declaration was at line " << symbol_table[scope_count].entries[i].line <<  ')';
								return 0;
							}			
						}
						
						struct entry new_entry;
						new_entry.ID = ($2)->first;
						new_entry.Type = variable_type;
						new_entry.Value = "nan";
						new_entry.line = ($2)->second;
						symbol_table[scope_count].entries.push_back(new_entry);
						
					}

				}
				id_tail |
				{
					is_variable_declaration = false;
				};


param_decl_list:	param_decl param_decl_tail |;

param_decl:	var_type id
			{
			
				for(int i = 0; i < symbol_table[scope_count].entries.size(); i++)
				{
					if (symbol_table[scope_count].entries[i].ID.compare(($2)->first) == 0)
					{
						cout << "DECLARATION ERROR " << ($2)->first << " (previous declaration was at line " << symbol_table[scope_count].entries[i].line <<  ')';
						return 0;
					}			
				}
				
				struct entry new_entry;
				new_entry.ID = ($2)->first;
				new_entry.Type = ($1)->first;
				new_entry.Value = "nan";
				new_entry.line = ($2)->second;
				symbol_table[scope_count].entries.push_back(new_entry);
			};


param_decl_tail:	',' param_decl param_decl_tail |;
func_declarations:	func_decl func_declarations |;

func_decl:	FUNCTION any_type id 
							{
							//cout <<($3)->first<<"----";
								struct symbol_tab new_table;
								new_table.scope_name = ($3)->first;			 
								symbol_table.push_back(new_table);
								scope_count++;

							} '(' param_decl_list ')' _BEGIN func_body END;


func_body:	decl stmt_list;
stmt_list:	stmt stmt_list |;
stmt:		base_stmt | if_stmt | while_stmt;
base_stmt:	assign_stmt | read_stmt | write_stmt | return_stmt;
assign_stmt:	assign_expr ';';
assign_expr:	id ':''=' expr;
read_stmt:	READ '(' id_list ')'';' ;
write_stmt:	WRITE '(' id_list ')'';' ;
return_stmt:	RETURN expr ';' ;
expr:		expr_prefix factor ;
expr_prefix:	expr_prefix factor addop | ;
factor:		factor_prefix postfix_expr;
factor_prefix:	factor_prefix postfix_expr mulop |;
postfix_expr:	primary | call_expr;
call_expr:	id '(' expr_list ')';
expr_list:	expr expr_list_tail |;
expr_list_tail:	',' expr expr_list_tail |;
primary:	'(' expr ')' | id | INTLITERAL | FLOATLITERAL;
addop:		'+'|'-';
mulop:		'*'|'/';

if_stmt:	IF 
			{
				blocks_count++;
				string block_name = "BLOCK " + to_string(blocks_count);
				struct symbol_tab new_table;
				new_table.scope_name = block_name;			 
				symbol_table.push_back(new_table);
				scope_count++;

			} '(' cond ')' decl stmt_list else_part ENDIF;


else_part:	ELSE 
			{	
				blocks_count++;
				string block_name = "BLOCK " + to_string(blocks_count);
				struct symbol_tab new_table;
				new_table.scope_name = block_name;			 
				symbol_table.push_back(new_table);
				scope_count++;
				
			}decl stmt_list |;


cond:		expr compop expr;
compop:		'<'|'>'|'='|'!''='|'<''='|'>''=';


while_stmt: WHILE 
			{
				blocks_count++;
				string block_name = "BLOCK " + to_string(blocks_count);
				struct symbol_tab new_table;
				new_table.scope_name = block_name;			 
				symbol_table.push_back(new_table);
				scope_count++;

			}'(' cond ')' decl aug_stmt_list ENDWHILE;


aug_stmt_list: aug_stmt aug_stmt_list |;
aug_stmt: base_stmt| aug_if_stmt | while_stmt | CONTINUE ';' | BREAK ';';
aug_if_stmt: IF '(' cond ')' decl aug_stmt_list aug_else_part ENDIF;
aug_else_part: ELSE decl aug_stmt_list|;

%%
